{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"RSI","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyP9XeXSAFoD+rWY7SuR3MMY"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"HBRIpyQqzTUm","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592837087731,"user_tz":-60,"elapsed":833,"user":{"displayName":"steffan phillips","photoUrl":"","userId":"09831739730026415785"}}},"source":["#Using RSI to determine whether a stock is over sold or under brought\n","#Oversold/overbrought - 30/70 \n","#divergence - when RSI rises to 70+ the stock has been overbrought so in theory the price will drop and visa versa\n"],"execution_count":70,"outputs":[]},{"cell_type":"code","metadata":{"id":"j01iba4TzdYK","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592837087733,"user_tz":-60,"elapsed":769,"user":{"displayName":"steffan phillips","photoUrl":"","userId":"09831739730026415785"}}},"source":["#import libs \n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import fix_yahoo_finance as yf"],"execution_count":71,"outputs":[]},{"cell_type":"code","metadata":{"id":"_zQHwOAX6qHg","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592837087734,"user_tz":-60,"elapsed":740,"user":{"displayName":"steffan phillips","photoUrl":"","userId":"09831739730026415785"}}},"source":["#working out SMMA for rsi measurement\n","#def the smma function \n","def smma (series,n):\n","  #putput = series at pos 0\n","  output = [series[0]]\n","  for i in range (1,len(series)):\n","    temp=output[-1]*(-1)+series[i]\n","  return output  "],"execution_count":72,"outputs":[]},{"cell_type":"code","metadata":{"id":"5qJy_u8ZAkBL","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592837087738,"user_tz":-60,"elapsed":734,"user":{"displayName":"steffan phillips","photoUrl":"","userId":"09831739730026415785"}}},"source":["# calculate the RSI based on the smma \n","def rsi (data,n=14):\n","  delta = data.diff().dropna()\n","\n","  #rsi up = np array where delta is greater than 0 \n","  up=np.where(delta>0,delta,0)\n","  #rsi down = np array where delta is smaller than 0\n","  down = np.where(delta<0,)\n","\n","  rs= np.divide(smma(up,n),smma(down,n))\n","  output = 100-100/(1+rs)\n","  return output[n:1]"],"execution_count":73,"outputs":[]},{"cell_type":"code","metadata":{"id":"njAK4JJiUTZW","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592837088342,"user_tz":-60,"elapsed":1323,"user":{"displayName":"steffan phillips","photoUrl":"","userId":"09831739730026415785"}}},"source":["#generate a short/lng singal based on rsi \n","def signal_gen(df,method,n=14):\n","  \n","  df['rsi']=0.0\n","  df['rsi'][n:]=method(df['Close'],n=14)\n","\n","  df['positions'] = np.select([df['rsi']<30,df['rsi']>70], [1,-1],default=0)\n","  df['signal']=df['positions']=df['positions'].diff()\n","\n","  return df[n:] "],"execution_count":74,"outputs":[]},{"cell_type":"code","metadata":{"id":"5amV_uCFccKX","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592837088344,"user_tz":-60,"elapsed":1302,"user":{"displayName":"steffan phillips","photoUrl":"","userId":"09831739730026415785"}}},"source":["#plotting the signal\n","#plot 1 = close price with shrt/lng positions\n","def plot (new,ticker):\n","  fig = plt.figure(figsize=(10,10))\n","  ax=fig.add_subplot(211)\n","\n","  #close price plot\n","  new['Close'].plot(label=ticker)\n","  #long price pos\n","  ax.plot(new.loc[new['signals']==1].index,\n","          new['Close'][new['signals']==1],\n","          label='LONG',lw=0,marker='^',c='g')\n","  #short price pos\n","  ax.plot(new.loc[new['signals']==1].index,\n","          new['Close'][new['singals']==1],\n","          label='SHORT',lw=0,marker ='v',c='r')\n","  \n","  #plot style\n","  plt.legend(loc='best')\n","  plt.grid(True)\n","  plt.title('Positiions: Shrt & Lng')\n","  plt.xlabel('price')\n","  plt.ylable('time')\n","\n","  plt.show()\n","\n","  #plot 2 showing RSI values 70 & 30 to see correlation\n","  bx=plt.figure(figsize=(10,10)).add_subplot(212,sharex=ax)\n","  new['rsi'].plot(label='relative strength index',c='#522e75')\n","  bx.fill_between(new.index,30,70,alpha=0.5,color='#f22f08')\n","    \n","  bx.text(new.index[-45],75,'overbought',color='#594346',size=12.5)\n","  bx.text(new.index[-45],25,'oversold',color='#594346',size=12.5)\n","    \n","  plt.xlabel('Date')\n","  plt.ylabel('value')\n","  plt.title('RSI')\n","  plt.legend(loc='best')\n","  plt.grid(True)\n","  plt.show()\n"],"execution_count":75,"outputs":[]},{"cell_type":"code","metadata":{"id":"sQhxO-PX-Sa6","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592837088345,"user_tz":-60,"elapsed":1257,"user":{"displayName":"steffan phillips","photoUrl":"","userId":"09831739730026415785"}}},"source":["#Chart formation pattern recognistion\n","# This script will analyse the price data to find a head and shoulders pattern in the price\n","# HEAD AND SHOULDER:\n","# A head and shoulders pattern is a technical indicator with a chart pattern described by three peaks \n","# the outside two are close in height and the middle is highest.\n","# The pattern describes a specific chart formation that predicts a bullish-to-bearish trend reversal.\n","def pattern (df,method,lag=14):\n","  df ['rsi']=0.0\n","  df['rsi'][lag:]=method(df['Close'],lag)\n","\n","  #period = the horizon of the pattern\n","  period = 25\n","\n","  #delta is the threshold of the difference in price \n","  # if delta is larger than the actual differnce then prices are significantly different.\n","  delta = 0.2\n","\n","  #significant multipliers for the delta \n","  head = 1.1\n","  shoulder = 1.1\n","\n","  df['signals']=0\n","  df['cumsum']=0\n","  df['coordinates']=''\n","\n","  #calculate entry and exit points from the trade \n","  entry_rsi=0\n","  #2 params for exiting the trade\n","  #exit rsi is the how much the rsi needs to increase before I exit the trade\n","  exit_rsi = 10\n","  #exit days is the amount of days to keep the stock for \n","  #counter var is used to keep track \n","  exit_days = 5\n","\n","  #finding the points of the pattern \n","  for i in range(period+lag,len(df)):\n","    moveon = False\n","    top = 0.0\n","    bottom = 0.0\n","    #checking holding pos and if the close price is not the max point in pattern \n","    if (df['cumsum'][i]==0) and (df['Close'][i] != max(df['Close'][i-period:i])):\n","      #getting the peak of the head in the pattern\n","      #max value in node j \n","      j=df.index.get_loc(df['Close'][i-period:1].idmax())\n","\n","      #if node j is bigger than i then move on to the next phase \n","      #abs = absolute value\n","      if (np.abs(df['Close'][j]-df['Close'][i])>head*delta):\n","        #bottom of pos i \n","        bottom = df['Close'][i]\n","        moveon=True\n","\n","      #finding node k (decline after the head)\n","      #node k is positioned in between j&i\n","      if moveon==True:\n","        moveon==False\n","        for k in range(j,i):\n","          if (np.abs(df['Close'][k]-bottom)<delta):\n","            moveon==True\n","            break\n","\n","      #finding node l(decline after 1st shoulder)\n","      #node l sits between j and the start of the pattern \n","      #if node l turns out not to be significantly smaller than j then \n","      #move to next phase\n","      if moveon==True:\n","        moveon=False\n","        for l in range(j,i-period+1,-1):\n","          if (np.abs(df['Close'][m]-bottom)<delta):\n","            moveon=True\n","            break\n","\n","     #finding node m (start of the pattern)\n","      if moveon==True:\n","       moveon=False\n","      for m in ranger (i-period,l):\n","          if(np.abs(df['Close'][m]-bottom)<delta):\n","            moveon=True\n","            break\n","    \n","    #finding node n (first shoulder) \n","    #max value between m:l\n","    if moveon==True:\n","      moveon==False\n","      n=df.index.get_loc(df['Close'][m:l].idmax())\n","      if (df['Close'][n]-bottom>shoulder*delta)and \\\n","      (df['Close'][j]-df['Close'][n]>shoulder*delta):\n","          top=df['Close'][n]\n","          moveon=True\n","\n","    #finding node o (second shoulder)\n","    #between pos k:i\n","    #as this is the last pos signals and coordinates are set up for data visulisation\n","    if moveon==True:        \n","        for o in range(k,i):\n","          if (np.abs(df['Close'][o]-top)<delta):\n","              df.at[df.index[i],'signals']=-1\n","              df.at[df.index[i],'coordinates']='%s,%s,%s,%s,%s,%s,%s'%(m,n,l,j,k,o,i)\n","              df['cumsum']=df['signals'].cumsum()\n","              entry_rsi=df['rsi'][i]\n","              moveon=True\n","              break\n","    \n","    #each time holding pos is held counter will ++\n","    # if exit conditions are met the trade is exited with long positions\n","    #counter gets freshed when trade is exited\n","    if entry_rsi !=0 and moveon==False:\n","      counter+=1\n","      if (df['rsi'][i]-entry_rsi>exit_rsi) or \\\n","        (counter>exit_days):\n","        df.at[df.index[i],'signals']=1\n","        df['cumsum']=df['signals'].cumsum()\n","        counter=0\n","        entry_rsi=0 \n","            \n","    return df"],"execution_count":76,"outputs":[]},{"cell_type":"code","metadata":{"id":"IQBy2jdm-9J8","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1592837088346,"user_tz":-60,"elapsed":1235,"user":{"displayName":"steffan phillips","photoUrl":"","userId":"09831739730026415785"}}},"source":["#visualise pattern\n","def pattern (new,ticker):\n","  #take a smaller portion of the data to analyse for the head & shoulder pattern \n","  a,b=list (new[new['signals']!=0].iloc[2:4].index)\n","  #extracting coordinates of pattern for plot \n","  temp = list(map(int,new['coordinates'][a].split(',')))\n","  indexList = list(map(lambda x:new.index[x],temp))\n","  #slice \n","  c=new.index.get_loc(b)\n","  newer = new[temp[0]-30:c+28]\n","\n","  #1st plot \n","  #price with pos \n","  #defining a single variable on the axis \n","  ax = plt.figure(figsize=(10,10)).add_subplot(211)\n","  newer['Close'].plot(label=ticker)\n","  #plot for lng pos\n","  ax.plot(newer['Close'][newer['signals']==1],marker='^',markersize=10, lw = 0,c='g',label = 'Long')\n","  #plot for short pos\n","  ax.plot(newer['Close'][newer['signals']==1],marker='v',markersize=10, lw = 0,c='r',label = 'Short')\n","  \n","  #plot styling\n","  plt.legend(loc = 0)\n","  plt.title('Head & Shoulder pos')\n","  plt.xlabel('Date')\n","  plt.ylabel('Price')\n","  plt.grid(True)\n","  plt.show()\n","  #################################\n","  \n","  #2nd plot\n","  #head/shoulder pattern\n","  bx=plt.figure(figsize=(10,10)).add_subplot(212,sharex=ax)\n","  newer['rsi'].plot(label='RSI',c='#f4ed71')\n","  #ploting rsi pattern \n","  bx.fill_bewteen(newer.index,30,70,alpha = 0.6,label='Overbrought/Oversold',color='#000d29')\n","\n","  bx.plot(newer['rsi'][indexlist],markersize=6,c='#8d2f23',label='head-shoulder pattern')\n","  bx.plot(newer['rsi'][newer['signals']==1],marker='^',markersize=12,w=0,c='g',label='LONG')\n","  bx.plot(newer['rsi'][newer['signals']==-1],marker='v',markersize=12,lw=0,c='r',label='SHORT')\n","\n","  #label head & shoudler points \n","  for i in [(1,'shoulder'),(3,'head'),(5,'shoulder')]:\n","    plt.text(indexlist[i[0]],newer['rsi'][indexlist[i[0]]]+2,\n","             '%s'%i[1],fontsize=10,color='#e4ebf2',horizontalalignment='center',verticalalignment='center')\n","    \n","  plt.title('RSI')\n","  plt.legend(loc=1)\n","  plt.xlabel('Date')\n","  plt.ylabel('value')\n","  plt.grid(True)\n","  plt.show()\n","\n","  #main program start \n","def main():\n","  ticker= input(\"pleaes enter the ticker of the stock that you wanr to analyse \")\n","  startdate = input(\"please enter your start date \")\n","  enddate = input('please enter your end')\n","  df=yf.download(ticker,start=startdate,end=enddate)\n","  new= signal_gen(df,rsi,n=14)\n","  plot(new,ticker)"],"execution_count":77,"outputs":[]},{"cell_type":"code","metadata":{"id":"U0pzvLC6do1P","colab_type":"code","colab":{}},"source":["  if __name__== '__main__':\n","    main()"],"execution_count":null,"outputs":[]}]}